/* --- override startingPrompt width after general node sizing rules --- */
.react-flow__node-startingPrompt {
  min-width: calc(var(--node-min-width) * 1.4) !important;
}
/* Node Editor Design System - Node Components */

/* ============================================
   NODE PANEL BASE STRUCTURE
   ============================================ */

/* ReactFlow Node Container - Let ReactFlow handle the sizing */
.react-flow__node-startingPrompt,
.react-flow__node-agentPrompt,
.react-flow__node-imagePrompt,
.react-flow__node-customOutput {
  min-width: var(--node-min-width);
  min-height: var(--node-min-height);
  max-width: none;
  padding: 0; /* Remove default padding, let .node-panel handle it */
  width: 100%;
  height: 100%;
}

/* Node Panel - Fill the ReactFlow node container completely */
.node-panel {
  width: 100%;
  height: 100%;
  background: var(--node-body-background);
  border: var(--node-border-width) solid var(--node-border-color);
  border-radius: var(--node-border-radius);
  box-shadow: var(--node-shadow);
  overflow: visible; /* Allow handles to be visible outside panel */
  font-family: var(--font-primary);
  color: var(--color-text-primary);
  transition: border-color var(--duration-normal) var(--easing-default);
  position: relative; /* Ensure proper positioning context */
  display: flex;
  flex-direction: column;
  box-sizing: border-box;
}

/* Hover states */
.react-flow__node-startingPrompt:hover .node-panel,
.react-flow__node-agentPrompt:hover .node-panel,
.react-flow__node-imagePrompt:hover .node-panel,
.react-flow__node-customOutput:hover .node-panel,
.node-panel:hover {
  border-color: var(--node-state-hover-border);
}

/* Selected states */
.react-flow__node-startingPrompt.selected .node-panel,
.react-flow__node-agentPrompt.selected .node-panel,
.react-flow__node-imagePrompt.selected .node-panel,
.react-flow__node-customOutput.selected .node-panel,
.node-panel.selected {
  border-width: var(--node-state-selected-border-width);
  border-color: var(--node-state-selected-border);
  box-shadow: var(--node-state-selected-shadow);
}

/* Disabled states */
.react-flow__node-startingPrompt.disabled .node-panel,
.react-flow__node-agentPrompt.disabled .node-panel,
.react-flow__node-imagePrompt.disabled .node-panel,
.react-flow__node-customOutput.disabled .node-panel,
.node-panel.disabled {
  opacity: var(--node-state-disabled-opacity);
  pointer-events: none;
}

/* ============================================
   NODE HEADER GRADIENTS
   ============================================ */

/* Node Header Base */
.node-header {
  padding: var(--node-header-padding);
  font-size: var(--node-header-font-size);
  font-weight: var(--node-header-font-weight);
  border-radius: var(--node-header-border-radius);
  color: var(--color-text-primary);
}

/* Header Gradient Types */
.node-header.model-loader {
  background: linear-gradient(to bottom, var(--color-header-model-loader-from), var(--color-header-model-loader-to));
}

.node-header.text-positive {
  background: linear-gradient(to bottom, var(--color-header-text-positive-from), var(--color-header-text-positive-to));
}

.node-header.text-negative {
  background: linear-gradient(to bottom, var(--color-header-text-negative-from), var(--color-header-text-negative-to));
}

.node-header.utility {
  background: linear-gradient(to bottom, var(--color-header-utility-from), var(--color-header-utility-to));
}

.node-header.output {
  background: linear-gradient(to bottom, var(--color-header-output-from), var(--color-header-output-to));
}

/* Map our node types to header styles - All panels now use gray (utility) colors */
.react-flow__node-startingPrompt .node-header {
  background: linear-gradient(to bottom, var(--color-header-utility-from), var(--color-header-utility-to));
}

.react-flow__node-agentPrompt .node-header {
  background: linear-gradient(to bottom, var(--color-header-utility-from), var(--color-header-utility-to));
}

.react-flow__node-imagePrompt .node-header {
  background: linear-gradient(to bottom, var(--color-header-utility-from), var(--color-header-utility-to));
}

.react-flow__node-videoPrompt .node-header {
  background: linear-gradient(to bottom, var(--color-header-utility-from), var(--color-header-utility-to));
}

.react-flow__node-customOutput .node-header {
  background: linear-gradient(to bottom, var(--color-header-output-from), var(--color-header-output-to));
}

/* Output Node State-based Colors */
.react-flow__node-customOutput.empty .node-header,
.node-panel.empty .node-header.output {
  background: linear-gradient(to bottom, var(--color-header-utility-from), var(--color-header-utility-to));
}

.react-flow__node-customOutput.has-content .node-header,
.node-panel.has-content .node-header.output {
  background: linear-gradient(to bottom, var(--color-header-output-from), var(--color-header-output-to));
}

/* Node Body - Complete definition */
.node-body {
  padding: var(--node-body-padding);
  width: 100%;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  flex: 1; /* Allow body to take available space */
  overflow: hidden; /* Prevent content overflow within body */
  word-wrap: break-word;
  overflow-wrap: break-word;
  border-radius: 0 0 var(--node-border-radius) var(--node-border-radius); /* Match panel corners */
  min-height: 0; /* Important: allows flex child to shrink below content size */
  gap: var(--spacing-xs); /* Add consistent spacing between child elements */
}

/* ============================================
   LEGACY SUPPORT
   ============================================ */

.custom-node {
  text-align: left;
  font-family: var(--font-primary);
  font-optical-sizing: auto;
  font-feature-settings: "liga" 1, "calt" 1;
  background: var(--node-body-background);
  border: var(--node-border-width) solid var(--node-border-color);
  border-radius: var(--node-border-radius);
  color: var(--color-text-primary);
  padding: var(--node-body-padding);
  box-shadow: var(--node-shadow);
}

/* Node content areas */
.node-content {
  display: flex;
  flex-direction: column;
}

.node-padding {
  padding: var(--spacing-xs);
}

/* ============================================
   CONNECTION PORTS
   ============================================ */

/* Connection Port */
.connection-port {
  display: flex;
  align-items: center;
  gap: var(--port-gap);
  font-size: var(--font-size-xs);
  margin-bottom: var(--control-spacing);
}

.connection-port-circle {
  width: var(--port-size);
  height: var(--port-size);
  border-radius: var(--port-border-radius);
}

.connection-port-circle.model { background: var(--color-wire-model); }
.connection-port-circle.clip { background: var(--color-wire-clip); }
.connection-port-circle.latent { background: var(--color-wire-latent); }
.connection-port-circle.conditioning { background: var(--color-wire-conditioning); }
.connection-port-circle.image { background: var(--color-wire-image); }
.connection-port-circle.vae { background: var(--color-wire-vae); }

/* Port Badge */
.port-badge {
  padding: var(--port-badge-padding);
  font-size: var(--port-badge-font-size);
  font-weight: var(--port-badge-font-weight);
  border-radius: var(--port-badge-border-radius);
}

.port-badge.model {
  background: var(--color-badge-model-bg);
  color: var(--color-badge-model-text);
}

.port-badge.clip {
  background: var(--color-badge-clip-bg);
  color: var(--color-badge-clip-text);
}

.port-badge.latent {
  background: var(--color-badge-latent-bg);
  color: var(--color-badge-latent-text);
}

.port-badge.conditioning {
  background: var(--color-badge-conditioning-bg);
  color: var(--color-badge-conditioning-text);
}

.port-badge.image {
  background: var(--color-badge-image-bg);
  color: var(--color-badge-image-text);
}

.port-badge.vae {
  background: var(--color-badge-vae-bg);
  color: var(--color-badge-vae-text);
}

/* ============================================
   PARAMETER CONTROLS
   ============================================ */

/* Parameters Container - wraps all parameter controls for better spacing */
.parameters-container {
  display: inline-flex;
  flex-direction: column;
  gap: 0; /* No gap needed - parameter controls handle their own spacing */
  margin-bottom: var(--spacing-sm); /* Separation from other items */
  flex: none;
  border: 1px solid #393939;
  border-radius: 6px;
  padding: 6px 8px; /* Reduced vertical padding */
  width: auto;
}

/* Parameter Control Base - should be compact */

.parameter-control {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: flex-start;
  gap: var(--spacing-sm);
  padding: 4px 0; /* Reduced padding for tighter spacing */
  font-size: var(--control-font-size);
  border-bottom: var(--control-border-bottom);
  margin-bottom: 0; /* Remove individual margins - container handles spacing */
  transition: background-color var(--duration-fast) var(--easing-default);
  min-height: auto;
  height: auto;
  line-height: 1.2;
  flex: none;
}

/* Remove border from last parameter control to avoid extra visual space */
.parameters-container .parameter-control:last-child {
  border-bottom: none;
}

.parameter-control .control-label {
  min-width: 110px;
  max-width: 140px;
  flex-shrink: 0;
  text-align: right;
  margin-right: 8px;
}

.parameter-control select {
  flex: 1;
  min-width: 120px;
  max-width: 200px;
}

/* When parameter controls are inside a container, adjust spacing */
.parameters-container .parameter-control {
  margin-bottom: 0; /* Container gap handles spacing */
}

.parameter-control:hover {
  background: rgba(39, 39, 42, 0.5);
  cursor: pointer;
}

.control-arrow {
  color: var(--control-arrow-color);
}

.control-label {
  color: var(--control-label-color);
  flex: none;
  line-height: 1.2;
}

.control-value {
  color: var(--control-value-color);
}

.control-value.monospace {
  font-family: var(--font-monospace);
}

.control-value.toggle-enabled {
  color: var(--color-control-toggle-enabled);
}

.control-value.toggle-disabled {
  color: var(--color-control-toggle-disabled);
}

/* Select elements in parameter controls should be compact and align properly */
.parameter-control select {
  padding: 4px 8px;
  border-radius: 4px;
  border: 1px solid var(--node-border-color);
  background: var(--node-body-background);
  color: var(--color-text-primary);
  font-size: 12px;
  line-height: 1.2;
  min-height: auto;
  height: auto;
}

/* Slider Control */
.slider-control {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-xs);
}

.slider-track {
  height: var(--slider-track-height);
  background: var(--slider-track-background);
  border-radius: var(--slider-border-radius);
  margin: var(--slider-margin);
  overflow: hidden;
}

.slider-fill {
  height: 100%;
  background: var(--slider-fill-background);
  border-radius: var(--slider-border-radius);
  transition: width var(--duration-fast) var(--easing-default);
}

/* ============================================
   TEXT AREA CONTROLS
   ============================================ */

/* Text Area Control */
.textarea-control {
  width: 100%;
  box-sizing: border-box;
  padding: var(--textarea-padding);
  font-size: var(--textarea-font-size);
  line-height: var(--textarea-line-height);
  color: var(--textarea-text-color);
  background: #000000;
  border: 1px solid #333333;
  border-radius: var(--textarea-border-radius);
  min-height: var(--textarea-min-height);
  margin-top: var(--spacing-xs);
  resize: none; /* Disable textarea resizing */
}

/* Node body flex container properties are now defined above */

/* Textarea wrapper should be flex container but not expand */
/* Only apply to divs that contain textarea controls, not parameter controls */
.node-body > div:not(.parameter-control):not(.helper-text):not(.details-section):not(.status-area):not(.file-context-indicator) {
  display: flex;
  flex-direction: column;
  flex: 1; /* Take available space */
  min-height: 0; /* Important: allows flex child to shrink below content size */
  margin-bottom: var(--spacing-xs); /* Ensure spacing between sections */
}

/* 4.A: Textarea control should take maximum available space within its container */
.node-body > div > .textarea-control,
.node-body > .textarea-control {
  flex: 1;
  min-height: var(--textarea-min-height);
  height: auto; /* Let flex handle the height */
  margin-top: 0; /* Remove top margin since node-body has gap */
  margin-bottom: 0; /* Remove bottom margin since node-body has gap */
}

/* 4.B, 4.C, 4.D: Helper text, parameter controls, and details should take minimal space */
.helper-text,
.parameter-control,
.details-section {
  flex-shrink: 0;
  flex-grow: 0;
  /* Take only the space needed for content */
}

/* Status Bar - Base styles for all node types */
.output-status-bar,
.agent-status-bar,
.image-status-bar,
.video-status-bar {
  display: flex;
  justify-content: flex-start;
  align-items: center;
  padding: var(--spacing-xs) var(--node-body-padding);
  background: rgba(0, 0, 0, 0.1);
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  font-size: var(--font-size-sm);
  flex-shrink: 0;
  width: 100%;
  box-sizing: border-box;
  overflow: hidden;
}

/* Output Status Bar - Horizontal compact layout with space-between */
.output-status-bar {
  justify-content: space-between;
}

/* Starting Status Bar - Neutral theme (same as output) */
.starting-status-bar {
  background: rgba(0, 0, 0, 0.1);
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

/* Agent Status Bar - Neutral theme (same as output) */
.agent-status-bar {
  background: rgba(0, 0, 0, 0.1);
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

/* Image Status Bar - Neutral theme (same as output) */
.image-status-bar {
  background: rgba(0, 0, 0, 0.1);
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

/* Video Status Bar - Neutral theme (same as output) */
.video-status-bar {
  background: rgba(0, 0, 0, 0.1);
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

/* Generic status item styles for all status bars */
.status-item {
  display: flex;
  align-items: center;
  gap: var(--spacing-xs);
  overflow: hidden;
  padding: var(--spacing-xs) var(--spacing-sm);
}

.status-icon {
  flex-shrink: 0;
  font-size: var(--font-size-sm);
}

.status-text {
  color: var(--color-accent-warning);
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  font-size: var(--font-size-sm);
}

/* Status Area - Should hug content height, not expand. Collapse when empty */
.status-area {
  flex: none;
  flex-shrink: 0;
  min-height: 0;
  height: auto;
}

/* Only show status area content when it has children */
.status-area:empty {
  height: 0;
  margin: 0;
  padding: 0;
}

/* Status Display - Compact version for output panels */
.status-display {
  display: flex;
  align-items: center;
  gap: var(--spacing-xs);
  padding: var(--spacing-xs) 0;
  font-size: var(--control-font-size);
  margin-bottom: var(--spacing-xs);
  flex-shrink: 0;
  max-width: 100%;
  overflow: hidden;
}

.status-display .control-label {
  color: var(--control-label-color);
  font-size: var(--font-size-sm);
  flex-shrink: 0;
  white-space: nowrap;
}

.status-display .control-value {
  color: var(--control-value-color);
  font-size: var(--font-size-sm);
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  flex: 1;
  min-width: 0;
}

.textarea-control.positive {
  background: #000000;
  border: 1px solid #333333;
}

.textarea-control.negative {
  background: #000000;
  border: 1px solid #333333;
}

.textarea-control.purple {
  background: #000000;
  border: 1px solid #333333;
}

/* Node-specific textarea styling - All now use black backgrounds */
.react-flow__node-agentPrompt .textarea-control {
  background: #000000;
  border: 1px solid #333333;
}

.react-flow__node-imagePrompt .textarea-control,
.react-flow__node-videoPrompt .textarea-control {
  background: #000000;
  border: 1px solid #333333;
}

/* Textarea styling - Legacy */
.custom-node textarea,
.node-text-area {
  width: 100%;
  min-height: var(--textarea-min-height);
  padding: var(--textarea-padding);
  resize: none; /* Disable individual textarea resizing */
  font-family: inherit;
  font-size: var(--textarea-font-size);
  line-height: var(--textarea-line-height);
  box-sizing: border-box;
  background: var(--color-bg-control);
  border: 1px solid var(--color-border);
  border-radius: var(--textarea-border-radius);
  color: var(--textarea-text-color);
  margin: var(--spacing-xs) 0;
}

.custom-node textarea.nodrag,
.node-text-area.nodrag {
  cursor: text;
}

.custom-node textarea:focus,
.node-text-area:focus {
  outline: none;
  border-color: var(--color-accent-warning);
  box-shadow: 0 0 0 var(--focus-outline-width) rgba(245, 158, 11, 0.2);
}

/* Preview content */
.custom-node .preview-content,
.preview-content-clickable {
  min-height: var(--textarea-min-height);
  padding: var(--textarea-padding);
  cursor: pointer;
  border-radius: var(--textarea-border-radius);
  background: var(--color-bg-control);
  border: 1px solid var(--color-border);
  transition: background-color var(--duration-normal) var(--easing-default);
}

.preview-content-padded {
  padding: var(--node-body-padding);
  margin: var(--spacing-xs);
}

/* Helper text styles - should be compact */
.helper-text {
  font-size: var(--font-size-sm);
  color: var(--color-text-secondary);
  /* Ensure minimal height */
  line-height: 1.2;
  margin: 0; /* Remove default margins - node-body gap handles spacing */
  padding: var(--spacing-xs) 0 0 0; /* Add top padding for better visual spacing */
}

.helper-text-spaced {
  padding: 0 var(--spacing-xs);
  margin-top: 0; /* Remove margin - gap handles spacing */
}

.helper-text-margined {
  margin-top: 0; /* Remove margin - gap handles spacing */
}

.helper-text-italic {
  font-style: italic;
}

.helper-text-small {
  font-size: var(--font-size-xs);
}

.helper-text-tiny {
  font-size: var(--font-size-xs);
  font-weight: normal;
}

/* Send button styles */
.send-button {
  background: none;
  border: none;
  padding: 0;
  margin-left: 8px;
  cursor: pointer;
  align-self: flex-end;
  color: var(--color-accent-primary);
  display: flex;
  align-items: center;
  height: 32px;
  transition: opacity 0.2s ease, transform 0.2s ease;
}

.send-button:hover:not(:disabled) {
  opacity: 0.7;
  transform: scale(1.05);
}

.send-button:active:not(:disabled) {
  transform: scale(0.95);
}

.send-button:disabled {
  opacity: 0.4;
  cursor: not-allowed;
}

/* Status indicators */
.status-indicator {
  font-size: var(--font-size-sm);
  padding: var(--spacing-xs);
  margin-top: var(--spacing-xs);
}

.status-indicator.processing {
  display: flex;
  align-items: center;
  gap: var(--spacing-xs);
}

/* Image display */
.custom-node img {
  max-width: 100%;
  max-height: 200px;
  border-radius: var(--radius-base);
}

.output-image {
  width: 100%;
  height: auto;
  max-height: none;
  border-radius: var(--radius-base);
  object-fit: contain;
  display: block;
}

.output-image.clickable {
  transition: transform 0.2s ease;
  cursor: pointer;
}

.output-image.clickable:hover {
  transform: scale(1.02);
}

.image-error {
  display: none;
  color: var(--color-text-primary);
  font-size: var(--font-size-sm);
  margin-top: var(--spacing-sm);
}

/* Content display */
.content-display {
  line-height: var(--line-height-relaxed);
}

.text-content {
  overflow-y: auto;
  overflow-x: hidden;
  line-height: var(--line-height-relaxed);
  word-wrap: break-word;
  overflow-wrap: break-word;
  hyphens: auto;
  width: 100%;
  box-sizing: border-box;
}

.waiting-content {
  font-style: italic;
  text-align: left;
  padding: var(--spacing-xl) var(--spacing-lg);
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 80px;
  opacity: 0.7;
}

/* ReactMarkdown content containment */
.text-content p,
.text-content div,
.text-content h1,
.text-content h2,
.text-content h3,
.text-content h4,
.text-content h5,
.text-content h6,
.text-content ul,
.text-content ol,
.text-content blockquote,
.text-content pre,
.text-content code {
  word-wrap: break-word;
  overflow-wrap: break-word;
  max-width: 100%;
  box-sizing: border-box;
}

.text-content pre {
  white-space: pre-wrap;
  overflow-x: auto;
}

.text-content code {
  white-space: pre-wrap;
}

/* Details and summary - should be compact */
.details-section {
  display: none; /* Hidden for now - can be enabled for debugging */
  margin-top: 0; /* Remove top margin - node-body gap handles spacing */
  margin-bottom: 0; /* Remove bottom margin */
  max-width: 100%;
  overflow: hidden;
  word-wrap: break-word;
  overflow-wrap: break-word;
  /* Ensure minimal height - only expand when opened */
  min-height: auto;
  height: auto;
  /* Ensure proper spacing within the section */
  padding: 0;
}

.details-section-large {
  margin-top: var(--spacing-md);
  max-width: 100%;
  overflow: hidden;
  word-wrap: break-word;
  overflow-wrap: break-word;
}

.summary-clickable {
  cursor: pointer;
}

.output-item {
  margin-bottom: var(--spacing-xs);
}

/* Node type specific styles */
.image-helper-text {
  margin-top: var(--spacing-sm);
  font-style: italic;
}

/* Content overflow fixes for all node types */
.react-flow__node-startingPrompt .node-body,
.react-flow__node-agentPrompt .node-body,
.react-flow__node-imagePrompt .node-body,
.react-flow__node-videoPrompt .node-body {
  overflow: hidden;
  word-wrap: break-word;
  overflow-wrap: break-word;
  /* Ensure proper flexbox layout */
  display: flex;
  flex-direction: column;
  flex: 1;
}

/* Ensure VideoPromptNode gets proper ReactFlow node styling */
.react-flow__node-videoPrompt {
  min-width: var(--node-min-width);
  min-height: var(--node-min-height);
  max-width: none;
  padding: 0;
  width: 100%;
  height: 100%;
}

/* Output node body specific styling to prevent extra space */
.react-flow__node-customOutput .node-body {
  flex: 1;
  min-height: 0;
  display: flex;
  flex-direction: column;
}

/* Output content area should fill available space */
.react-flow__node-customOutput .node-body > div:first-child {
  flex: 1;
  display: flex;
  flex-direction: column;
  min-height: 0;
}

/* Text content should expand to fill available space */
.react-flow__node-customOutput .text-content {
  flex: 1;
  display: flex;
  flex-direction: column;
}

/* Waiting content should fill available height */
.react-flow__node-customOutput .waiting-content {
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 100px;
}

.react-flow__node-startingPrompt .textarea-control,
.react-flow__node-agentPrompt .textarea-control,
.react-flow__node-imagePrompt .textarea-control,
.react-flow__node-videoPrompt .textarea-control {
  word-wrap: break-word;
  overflow-wrap: break-word;
  white-space: pre-wrap;
}

/* Helper text containment */
.react-flow__node-startingPrompt .helper-text,
.react-flow__node-agentPrompt .helper-text,
.react-flow__node-imagePrompt .helper-text,
.react-flow__node-videoPrompt .helper-text {
  word-wrap: break-word;
  overflow-wrap: break-word;
  max-width: 100%;
  overflow: hidden;
}

/* ============================================
   DESIGN SYSTEM - CONNECTION WIRES (SVG)
   ============================================ */

.connection-wire {
  stroke-width: 2px;
  fill: none;
  stroke-linecap: round;
  pointer-events: none;
}

.connection-wire.model { stroke: var(--color-wire-model); }
.connection-wire.clip { stroke: var(--color-wire-clip); }
.connection-wire.latent { stroke: var(--color-wire-latent); }
.connection-wire.conditioning { stroke: var(--color-wire-conditioning); }
.connection-wire.image { stroke: var(--color-wire-image); }
.connection-wire.vae { stroke: var(--color-wire-vae); }

.connection-wire.selected {
  stroke-width: 3px;
  filter: drop-shadow(0 0 4px currentColor);
}

/* ============================================
   DESIGN SYSTEM - ENHANCED REACTFLOW INTEGRATION
   ============================================ */

/* Enhanced ReactFlow handles for design system */
.react-flow__handle {
  width: 15px !important;  /* 12px * 1.25 */
  height: 15px !important; /* 12px * 1.25 */
  border: 2px solid var(--color-border) !important;
  background: var(--color-bg-node-body) !important;
  border-radius: 50% !important;
  position: absolute !important;
  z-index: 10 !important;
  transition: all var(--duration-normal) var(--easing-default) !important;
}

.react-flow__handle.react-flow__handle-left {
  left: -9px !important;  /* Adjusted for larger size */
  top: 50% !important;
  transform: translateY(-50%) !important;
}

.react-flow__handle.react-flow__handle-right {
  right: -9px !important; /* Adjusted for larger size */
  top: 50% !important;
  transform: translateY(-50%) !important;
}

/* Hover styles defined later to enhance type color without replacing it */

/* ReactFlow connection states - using the actual classes ReactFlow applies */
.react-flow__handle.connecting {
  background: var(--color-accent-primary) !important;
  border-color: var(--color-accent-primary) !important;
}

.react-flow__handle.valid {
  background: var(--color-accent-success) !important;
  border-color: var(--color-accent-success) !important;
}

.react-flow__handle-target.valid {
  background: var(--color-accent-success) !important;
  border-color: var(--color-accent-success) !important;
}

.react-flow__handle-source.valid {
  background: var(--color-accent-warning) !important;
  border-color: var(--color-accent-warning) !important;
}

/* Connected state - ReactFlow adds these classes */
/* Connectors maintain their type-based colors (from inline styles) when connected */
.react-flow__handle.connected,
.react-flow__handle[data-nodeid][data-handleid] {
  /* Type colors are applied via inline styles in NodeConnectors */
  /* No override needed - let type colors show through */
  opacity: 1;
  transform: scale(1.1);
  transition: transform var(--duration-fast), opacity var(--duration-fast);
}

/* Hover state - enhance the type color without replacing it */
.react-flow__handle:hover {
  filter: brightness(1.2);
  transform: translateY(-50%) scale(1.15);
  box-shadow: 0 0 8px currentColor;
}

/* Enhanced connection lines */
.react-flow__edge path {
  stroke: var(--color-text-tertiary);
  stroke-width: 2;
  cursor: pointer;
  transition: stroke var(--duration-fast), stroke-width var(--duration-fast), filter var(--duration-fast);
}

.react-flow__edge:hover path {
  stroke-width: 3;
  filter: brightness(1.2);
}

.react-flow__edge.selected path {
  stroke: #ffffff !important;
  stroke-width: 3;
  filter: drop-shadow(0 0 4px rgba(255, 255, 255, 0.6)) drop-shadow(0 0 8px rgba(255, 255, 255, 0.3));
}

.react-flow__connectionline {
  stroke: var(--color-accent-primary);
  stroke-width: 2;
}

/* ============================================
   DESIGN SYSTEM - FOCUS ACCESSIBILITY
   ============================================ */

.node-panel:focus-visible,
.parameter-control:focus-visible,
input:focus-visible,
select:focus-visible,
textarea:focus-visible {
  outline: var(--focus-outline-width) solid var(--focus-outline-color);
  outline-offset: 2px;
}

/* ============================================
   DESIGN SYSTEM - ANIMATION UTILITIES
   ============================================ */

.transition-fast {
  transition-duration: var(--duration-fast);
  transition-timing-function: var(--easing-default);
}

.transition-normal {
  transition-duration: var(--duration-normal);
  transition-timing-function: var(--easing-default);
}

.transition-slow {
  transition-duration: var(--duration-slow);
  transition-timing-function: var(--easing-default);
}

/* ============================================
   PANEL RESIZING FUNCTIONALITY
   ============================================ */

/* Removed conflicting overflow rule - overflow: visible is set at the top of the file to show full handle circles */

/* ============================================
   NODE RESIZER STYLING
   ============================================ */

/* Hide NodeResizer corners by default, show only when dragging */
.react-flow__resize-control {
  opacity: 0;
  transition: opacity 0.2s ease;
  pointer-events: auto; /* Ensure resize controls are interactive */
}

/* Show resize controls when node is selected or being resized */
.react-flow__node.selected .react-flow__resize-control,
.react-flow__resize-control.dragging,
.react-flow__resize-control:hover {
  opacity: 1;
}

/* Ensure resize controls are positioned relative to the ReactFlow node container */
.react-flow__node {
  position: relative;
}

.react-flow__resize-control {
  position: absolute;
  pointer-events: auto;
  z-index: 10;
}

/* ============================================
   PROGRESS BAR ANIMATION
   ============================================ */

@keyframes progress-bar {
  0% {
    transform: scaleX(0);
  }
  50% {
    transform: scaleX(1);
  }
  100% {
    transform: scaleX(0);
  }
}

/* ============================================
   UTILITY CLASSES
   ============================================ */